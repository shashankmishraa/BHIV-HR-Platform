name: BHIV HR Platform - CI/CD Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.12.7'
jobs:
  lint-and-security:
    name: Code Quality & Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort bandit safety pylint mypy
          find . -name requirements.txt -exec pip install -r {} \;
      - run: black --check --diff .
      - run: isort --check-only --diff .
      - run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - run: |
          find . -name "*.py" -path "*/services/*" | head -20 | xargs mypy --ignore-missing-imports || true
      - name: Run Bandit Security Scan
        run: |
          bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed with warnings"
          test -f bandit-report.json && echo "Bandit report generated" || echo "Bandit report missing"
      - name: Run Safety Check
        run: |
          safety check --json --output safety-report.json || echo "Safety check completed with warnings"
          test -f safety-report.json && echo "Safety report generated" || echo "Safety report missing"
      - name: Debug - List report files
        run: |
          ls -lh *.json || echo "No JSON reports found"
          ls -lh bandit-report.json || echo "Bandit report not found"
          ls -lh safety-report.json || echo "Safety report not found"
      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('bandit-report.json') != ''
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30
      - name: Upload Safety Report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('safety-report.json') != ''
        with:
          name: safety-security-report
          path: safety-report.json
          retention-days: 30
  test-services:
    name: Test Microservices
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [gateway, agent, portal, client_portal]
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.service }}-
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f "services/${{ matrix.service }}/requirements.txt" ]; then
            pip install -r "services/${{ matrix.service }}/requirements.txt"
          fi
          pip install pytest pytest-cov pytest-asyncio httpx
      - name: Test ${{ matrix.service }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci
          API_V1_PREFIX: /api/v1
        run: |
          if [ -d "services/${{ matrix.service }}/tests" ]; then
            cd "services/${{ matrix.service }}"
            python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
          else
            echo "No tests found for ${{ matrix.service }}"
            exit 0
          fi
      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('services/${{ matrix.service }}/coverage.xml') != ''
        with:
          name: coverage-${{ matrix.service }}
          path: services/${{ matrix.service }}/coverage.xml
          retention-days: 30
  build-images:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [lint-and-security, test-services]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [gateway, agent, portal, client_portal]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.bhiv-hr.com
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          echo "Services deployed: gateway, agent, portal, client_portal"
          echo "Environment: staging.bhiv-hr.com"
  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [gateway, agent, portal, client_portal]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-security, test-services, build-images, deploy-staging]
    if: always()
    steps:
      - name: Notify Success
        if: needs.lint-and-security.result == 'success' && needs.test-services.result == 'success' && needs.build-images.result == 'success' && needs.deploy-staging.result == 'success'
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "All services tested, built, and deployed to staging"
      - name: Notify Failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "❌ Pipeline failed!"
          echo "Lint and Security: ${{ needs.lint-and-security.result }}"
          echo "Test Services: ${{ needs.test-services.result }}"
          echo "Build Images: ${{ needs.build-images.result }}"
          echo "Deploy Staging: ${{ needs.deploy-staging.result }}"
          exit 1
